Store
	Holds the global state of the application, and is responsible for:
		1. Updating the app's state using its reducer
		2. Broadcasting the state to an application's view layer via subscription
		3. Listening for actions that tell it how and when to change the global state
		   of an application.
	Create the store with #createStore(reducer, [preloadedState], [enhancer]);
		0. Import { createStore } from "redux";
		1. Reducer - a reducing function that receives the app's current state
		   and incoming actions, determines how to update the store's stae, and
		   returns the next state.
		2. preLoadedState - an object representing state that existed before the store was created.
		3. enhancer - a function that adds extra functionality to the store
	Other Methods
		1. getState() - returns the store's current state
		2. dispatch(action) - passes action to the store's reducer telling it what to update
		3. subscribe(callback) - registers callbacks to be triggered when the store updates
		   * returns a function that when invokes unsubscribes the callback from the store
		   * one example is subscribing a store to a forceUpdate function, which will
		     force a re-render every time the app state changes. Remember to bind forceUpdate!


Reducer
	Example of a reducer for fruit
		const fruitReducer = (state = [], action) => {
		  switch (action.type) {
		    case "ADD_FRUIT":
		      return [...state, action.fruit];
		    case "ADD_FRUITS":
		      return [...state, ...action.fruits];
		    case "SELL_FRUIT":
		      const idx = state.indexOf(action.fruit);
		      if (idx !== -1) {
			// remove first instance of action.fruit
			return [...state.slice(0, idx), ...state.slice(idx + 1)];
		      }
		      return state; // if action.fruit is not in state, return previous state
		    case "SELL_OUT":
		      return [];
		    default:
		      return state;
		  }
		};
	Breakdown
		When a store is initialized, it will call its reducer with an undefined state, and the reducer will set it to the default value
		The rest of the reducer will implement updates based on the action.type switch table
	Immutable State
		Do NOT ever mutate a reducer's arguments, state and action, since React must use pure-functions.
		Use Object.freeze() to ensure the state never accidentally gets changed, and Object.assign() to make a new state.
			const goodReducer = (state = { count: 0 }, action) => {
			  Object.freeze(state);
			  switch (action.type) {
				case "INCREMENT_COUNTER":
				  let nextState = Object.assign({}, state); // state should never be deeply nested, so this shallow dup is good enough
				  nextState.count++;
				  return nextState;
				default:
				  return state;
			  }
			};
	Splitting Reducers (also called reducer composition)
		1. Split reducers into multiple files, such as farmers_reducer.js and fruits_reducer.js
		2. Create a rootReducer, and combine the reducers into it using combineReducers
			const rootReducer = combineReducers({
			  fruits: fruitsReducer,
			  farmers: farmersReducer
			});
		3. Tie the reducer to the store. This is necessary because store only takes a single reducer.
	Delegating to Reducers
		You can delegate a reducer to helper reducers, such as farmersReducer delegating to farmerReducer.
			    case "PAY_FARMER":
				  nextState[action.id] = farmerReducer(nextState[action.id], action); //update a farmer
				  return nextState;
				case "HIRE_FARMER":
				  nextState[action.id] = farmerReducer(undefined, action); // create a new farmer
				  return nextState;
				  
				  
Actions
	Actions consist of POJOs that contain the action and the payload needed to execute the action.
	Use action creators to more simply dispatch actions
		const addFruit = fruit => ({
		  type: "ADD_FRUIT",
		  fruit
		});
		store.dispatch(addFruit("Apple"));
				  
				  
				  
				  
				  
				  



Job Listing Project
	To export default a const, you must put the export default objName on a different line!
		const store = createStore(reducer);
		export default store;










				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
