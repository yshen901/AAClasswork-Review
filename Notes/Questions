Project Notes
-------------
W2D5 Todo Project
	- Use cmd, *args = gets.chomp.split(' ') to freely pull out values
	- When printing with a one line if, use quotes ... (condition ? truthy : falsey)
	- String.ljust(20) to add padding until it is 20 chars long
W3D1 Enumerables
	- &blk looks for situations where you do method_call {stuff}
	- prc looks for situations where you do method_call(prc), where prc = Proc.new(...)
	- & turns things into procs if they aren't already
	- yield(...) is the same as prc.call(...)
	- if __FILE__ == $PROGRAM_NAME  checks to see if we're using pry or not, and runs if we are running the file
	
W3D1 Ghost
	- words = File.open("./dictionary.txt")
	- Set.new([...])
	- words.readlines.map(&:chomp)
		... :chomp creates a simple proc, & turns it into a proc
		... readlines reads each line as items in an array
	- Use print for getting user input, as it leaves out the string quotes
	
W3D2 Sudoku
	- Returning a string that has been colorized doesn't work, you must return a ColorizedString
	- Use transpose to flip rows into columns


W3D3 Recursion
	- idx_1, idx_2 = 0 only sets idx_1...idx_2 remains nil
	- IMPORTANT: maybe avoid using pop when dealing with input arrays, as it is in place.
	             and will modify the original array passed into the argument.
	- An empty array won't trigger an each...dumbass
	- Often you don't need a array.length == 1 case, just keep iterating until array is empty
	
W3D3 WordChainer
	- Use a hash to build a relations list?
	
W3D4 sudoku
	- require_relative doesn't need to specify file name!
	- resucue => error gives u access to the error
	
W4D2 company
	- Use is_a?(class_type) to determine behavior
	
W4D2 chess
	- Circular require_relative is dangerous, can cause uninitialized constant error!
	- Keep in mind what each method is returning...don't forget the return statement
	
W4D3 simon
	- COLORS = %w(red blue green yellow) ... makes an array with 4 strings
	
W4D3 Chess
	- p does not work well as it outputs what the value literally is...becomes a mess with colorize
		... use print instead
	- Clean up terminal rendering by doing all logic first, then printing the whole thing, rather than
	  printing one chunk at a time.
	- Be careful of double nested "none?" functions...it behaves strangely.
	
W4D5
	- Use sort_by(&:method) to sort by specific attributes.
	- Think of edge cases, don't get trapped by scenarios that will never happen. (largest_contiguous_subsum)
	- MinMaxStackQueue updates the min/max after pushing all of the items in pusher onto popper such that
	  min/max is accurate after popping items.
	  
W5D1
	- echo '--color' >> ~/.rspec  ... to make rspec output pretty
	- 'a'.ord returns the ascii of a character


Questions
---------
How to use ruby.print if my class has a method called print?


TBD
	W3D1: 	eight_queens, maze_solver, project_euler	(algo practice)
	W3D2: 	sudoku_solver					(oop practice)
	W3D4: 	minesweeper
	W4D3: 	chess phase VI
	W4D4: 	EVERYTHING					(no need to learn specs)
	W4D5: 	anagrams					(review permutations)
	W5D1: 	dynamic_arrays
	W5D2: 	07a_bonus, 09_self_joins
	W5D3: 	plays_orm, aa_questions_orm			(orm sql is made obselete by ActiveRecord)
		flexbox_froggy, shakshuka 			(css already known)	W
	W5D4:	url_shortener 					(phases 4+ involve things that later days will cover)
	W6D1:	polls_app					(2 bonus sections, complex ActiveRecord, good for practice)
	W6D2:	metaprogramming				(unecessary, come back later if you have time)
	W6D4:	art_share					(bonus phase 2 and 3, extra practice with routes and tables)
	W6D5:	99_cats					(style to look like the demo)
	W7D1:	99_cats					(multiple session bonus)
	W7D2:	music_app					(notes, helpers, activated, admin, tags ... repetitive practice).
	W7D3:	EVERYTHING					(no need to learn capybara rn)
	W7D4: 	EVERYTHING					(took notes, but no need to do css practice...do that in project)
	W7D5:	EVERYTHING					(took notes, but no need to do css practice...do that in project)
	W8D1: 	EVERYTHING					(concerns, checkboxes and id setters to make a tag_ids=[array of tag_ids]...good for checkboxes)
	W8D2:	EVERYTHING					(rails lite...breaking down what happens behind the scenes for rails, servers, controllerbase, etc)
