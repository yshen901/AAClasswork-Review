Function Tips
	Implicit Returns ... final line is the returned value
	Omit parentheses when calling functions with no parameters
	Default Arguments
		List after mandatory arguments
			def repeat(message, num = 1)
			def greet (person_1, person_2 = nil)
	Hash arguments
		method("hello", {"location"=>"SF", "color"=>"red", "size"=>100})
		method("hello", "location"=>"SF", "color"=>"red", "size"=>100)

Simple Functions
	num.even?			--> true/false
	arr.length 			--> number
	arr.last			--> element
	
	var.instance_of?(Type)		--> true/false

	str.upcase!			--> mutates the original string
	str.upcase			--> returns a new string

Arrays
	Declaring
		arr = []
		arr = Array.new(3)
		arr = Array.new(3, "?")
	2D arrays
		arr = Array.new(3, Array.new(4)) 	... makes 3 copies of the same array
		arr = Array.new(3) { Array.new(3) } 	... evalutes the block 3 times, making a new 
							    array each time
		
Coding Tricks
	Swapping ... array[0], array[1] = array[1], array[0]
	
Conditionals
	Use single line conditionals (puts ... if ...)

Enumerables
	arr.all?  { |el| el.even? }	--> true/false
	arr.any?  { |el| el.even? }	--> true/false
	arr.none? { |el| el.even? }	--> true/false
	arr.one   { |el| el.even? }	--> true/false
	arr.count { |el| el.even? } 	--> number

	arr.sum				--> number
	arr.max or arr.min		--> number
	arr.flatten			--> 1D array (works for any multi-dimensional array)

Exceptions
	Handle with begin...rescue
		begin
			...block of code
		rescue
			...code to call if above fails
		end
	Can manually trigger an exception in a function itself, which can be caught with begin...rescue
		def format_name(first, last)
			if ! last.instance_of?(String)
				raise "arguments must be strings"
			end
		end
	Common Exceptions
		ZeroDivisionError
		ArgumentError
		NameError
		NoMethodError
		IndexError
		TypeError

Inject
	Maintains an accumulator that starts as the first element, and is set to the result of
	the block after each iteration. Here it can be addition, but it can other things too.
		arr.inject { |acc, el| acc + el }
	
	You can pass in an argument to set the initial accumulator
		arr.inject(100} { |acc, el| acc + el }

Loops
	arr.times { puts "hi" }

Scope
	Methods have their own local scope
		values defined therein stay therre
		values defined in the surrounding scope cannot be accessed
	Global scope
		defined with $message = "global variable"
		can be accessed anywhere
	Constants
		defined with caps ... CONSTANT_VALUE = "boba is life"
		cannot be reassigned (triggers warning)
		can be mutated
		part of global scope
	Blocks
		do not have their own scope, and share the same scope as surrounding
		conditions and loops also don't have their own scope

Splat (*)
	Use to take in other arguments
		method(arg_1, arg_2, *other_args)
	Use to decompose arays
		greet (*names) ... names = ["Grace", "Hopper"] 
	Use to decompose hashes
		new_hash = {**old_hash, c:3} = {a:1, b:2, c:3}

Sorts
	Bubble
		move values you find out of order upwards until they are in order
		sot finishes when no swaps are made in an iteration

Symbols
	Different from strings in that they are immutable... "hello" and :hello arer different
	Symbols always have the same object id
		"hello".object_id will return different IDs each time
		:hello.object_id  will return the same always
	Symbols can be used as hash keys
		my_hash = { :name => "App Academy" }
		my_hash = { name:"App Academy" }
		
		my_hash[:name] --> "App Aacdemy"

Variable Referencing
	Strings are pointers to memory...reassigning to another string sets both object_ids to be equal
		Two strings that are equal will experience the same changes
	Operations that mutate data don't change object_id
		word_1.upcase! ... mutates the data, and uppercases everything, but ID is the same
	Reassignment changes object_id
		word_1 = "bye" ... equals reassigns the data, changing ID
